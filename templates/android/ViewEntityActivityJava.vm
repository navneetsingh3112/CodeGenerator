package in.novopay.services.activities;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.util.HashMap;
import java.util.Map;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import in.novopay.services.R;
import in.novopay.services.base.NovopayBaseActivity;
import in.novopay.services.presenters.View${entity.upperCamelCaseClassName}Presenter;
import in.novopay.services.utils.AppConstant;
import in.novopay.services.utils.GUIUtils;
import in.novopay.services.views.View${entity.upperCamelCaseClassName}View;
import in.novopay.network.responses.Get${entity.upperCamelCaseClassName}DetailsResponse;
import in.novopay.uicontrollibrary.utils.AppConstants;

/**
 * Created by ${entity.author} on ${entity.date}.
 */

public class View${entity.upperCamelCaseClassName}Activity extends NovopayBaseActivity implements View${entity.upperCamelCaseClassName}View {
    @BindView(R.id.toolbar)
    Toolbar toolbar;

    @BindView(R.id.activity_title)
    TextView activityTitle;
    
    @BindView(R.id.heading_text_view)
    TextView headingTextView;
    
    @BindView(R.id.sub_heading_text_view)
    TextView subHeadingTextView;
    
    @BindView(R.id.columns_layout)
    LinearLayout columnsLayout;

	private String recordId;
    private String title;
    private View${entity.upperCamelCaseClassName}Presenter presenter;
    private Map<String, String> recordDetailsMap = new HashMap<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_view_${entity.lowerSnakeCaseClassName});
        getAppComponent().inject(this);
        ButterKnife.bind(this);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        presenter = new View${entity.upperCamelCaseClassName}Presenter(service, this);

        getIntentExtras();
        setTitle(title);
        initView();
    }

    public void getIntentExtras() {
        title = getIntent().getStringExtra(AppConstant.INTENT_EXTRA_TITLE);
        recordId = getIntent().getStringExtra(AppConstant.INTENT_EXTRA_ENTITY_ID);
    }

    private void setTitle(String title) {
        activityTitle.setText(title + " Details");
    }

    private void initView() {
        presenter.getGeneralLedgerDetails();
    }

    @OnClick(R.id.edit_button)
    protected void editButtonOnClick() {
        if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
            mLastClickTime = SystemClock.elapsedRealtime();
        } else {
            mLastClickTime = SystemClock.elapsedRealtime();
            Intent intent = new Intent(this, Create${entity.upperCamelCaseClassName}Activity.class);
            intent.putExtra(AppConstant.INTENT_EXTRA_TITLE, title);
            intent.putExtra(AppConstant.INTENT_EXTRA_CREATE_OR_EDIT, AppConstant.INTENT_EXTRA_EDIT);
            startActivity(intent);
            GUIUtils.overridePendingTransitionForEnter(this);
        }
    }
    
    @OnClick(R.id.delete_button)
    protected void deleteButtonOnClick() {
        if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
            mLastClickTime = SystemClock.elapsedRealtime();
        } else {
            mLastClickTime = SystemClock.elapsedRealtime();
            AlertDialog.Builder builder = new AlertDialog.Builder(this).setCancelable(false);
            View view = getLayoutInflater().inflate(R.layout.template_dialog, null, false);
            builder.setView(view);
            TextView title = (TextView) view.findViewById(R.id.heading_text);
            title.setText("Confirm");
            TextView textView = (TextView) view.findViewById(R.id.message_text);
            textView.setText("Do you really want to delete this record?");

            builder.setPositiveButton(AppConstants.DELETE, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int id) {
                    dialog.dismiss();
                }
            });

            builder.setNegativeButton(AppConstants.CANCEL, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int id) {
                    dialog.dismiss();
                }
            });

            AlertDialog dialog = builder.create();
            dialog.show();
            dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getResources().getColor(R.color.fail_red));
            dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getResources().getColor(R.color.novopay_color_primary));
        }
    }
    
    @Override
    public String getId() {
        return recordId;
    }

    @Override
    public void onSuccessResponseOfDetails(Get${entity.upperCamelCaseClassName}DetailsResponse response) {
        if(response != null) {
        	setHeaderAndSubHeader(response);
        	setRecordDetailsMap(response);
        	
        	for(String key: recordDetailsMap.keySet()){
                LinearLayout mainLayout = (LinearLayout) getLayoutInflater().inflate(R.layout.item_view_entity_column, null, false);
                TextView columnName = (TextView) mainLayout.findViewById(R.id.column_name_text_view);
                TextView columnValue = (TextView) mainLayout.findViewById(R.id.column_value_text_view);

                columnName.setText(key);
                columnValue.setText(recordDetailsMap.get(key));

                columnsLayout.addView(mainLayout);
            }
        } else {
            showMessage("Response is empty.");
            onBackPressed();
        }
    }
    
    public void setHeaderAndSubHeader(GetGeneralLedgerDetailsResponse response) {
        headingTextView.setText(response.get${entity.primaryUIField.upperCamelCaseName}());

        String subHeading = "";
        #foreach ($field in $entity.secondaryUIFieldList)
    	#if( $velocityCount == $entity.secondaryUIFieldList.size() )
    		subHeading = subHeading + response.get${field.upperCamelCaseName}();
    	#else
    		subHeading = subHeading + response.get${field.upperCamelCaseName}() + " | ";
    	#end	
    	#end
        
        subHeadingTextView.setText(subHeading);
    }
    
    public void setRecordDetailsMap(GetGeneralLedgerDetailsResponse response) {
        recordDetailsMap = new HashMap<>();
#foreach ($field in $entity.fieldList)
#if( ${field.lowerCamelCaseName} != "createdOn" && ${field.lowerCamelCaseName} != "createdBy" && ${field.lowerCamelCaseName} != "updatedOn" && ${field.lowerCamelCaseName} != "updatedBy")
		recordDetailsMap.put("${field.displayName}", response.get${field.upperCamelCaseName}());
#end
#end
    }

    @Override
    public void OnFailureResponseOfDetails() {
        onBackPressed();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        finish();
        GUIUtils.overridePendingTransitionForExit(this);
    }
}