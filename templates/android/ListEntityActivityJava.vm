package in.novopay.services.activities;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import in.novopay.network.responses.Get${entity.upperCamelCaseClassName}ListResponse;
import in.novopay.services.R;
import in.novopay.services.adapters.List${entity.upperCamelCaseClassName}Adapter;
import in.novopay.services.base.NovopayBaseActivity;
import in.novopay.services.presenters.List${entity.upperCamelCaseClassName}Presenter;
import in.novopay.services.utils.AppConstant;
import in.novopay.services.utils.GUIUtils;
import in.novopay.services.views.List${entity.upperCamelCaseClassName}View;

/**
 * Created by ${entity.author} on ${entity.date}.
 */

public class List${entity.upperCamelCaseClassName}Activity extends NovopayBaseActivity implements List${entity.upperCamelCaseClassName}View {
    @BindView(R.id.toolbar)
    Toolbar toolbar;

    @BindView(R.id.activity_title)
    TextView activityTitle;
    
    @BindView(R.id.right_logo)
    ImageView appBarRightLogo;
    
    @BindView(R.id.no_records_found_image_view)
    ImageView noRecordFoundImageView;

    @BindView(R.id.network_failure_image_view)
    ImageView networkFailureImageView;

    @BindView(R.id.list_${entity.lowerSnakeCaseClassName}_recycle_view)
    RecyclerView recycleView;

    private String title;
    private List${entity.upperCamelCaseClassName}Presenter presenter;
    private List${entity.upperCamelCaseClassName}Adapter adapter;
    private ArrayList<GetHierarchyLevelListResponse.GetHierarchyLevelDetails> responseList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_list_${entity.lowerSnakeCaseClassName});
        getAppComponent().inject(this);
        ButterKnife.bind(this);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        presenter = new List${entity.upperCamelCaseClassName}Presenter(service, this);

        getIntentExtras();
        setTitle(title);
        appBarRightLogo.setImageResource(R.drawable.ic_plus_white);
        initView();
    }

    public void getIntentExtras() {
        title = getIntent().getStringExtra(AppConstant.INTENT_EXTRA_TITLE);
    }

    private void setTitle(String title) {
        activityTitle.setText(title);
    }

    private void initView() {
        hideEveryThing();
        presenter.get${entity.upperCamelCaseClassName}List();
    }
    
    @OnClick(R.id.right_logo)
    protected void appBarRightLogoOnClick(){
        Intent intent = new Intent(this, Create${entity.upperCamelCaseClassName}Activity.class);
        intent.putExtra(AppConstant.INTENT_EXTRA_TITLE, title);
        startActivity(intent);
        GUIUtils.overridePendingTransitionForEnter(this);
    }
    
    
    @OnClick(R.id.network_failure_image_view)
    protected void networkFailureOnClick(){
        hideEveryThing();
        presenter.get${entity.upperCamelCaseClassName}List();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        finish();
        GUIUtils.overridePendingTransitionForExit(this);
    }
    
    public void onItemClick(int position) {
    	Intent intent = new Intent(this, View${entity.upperCamelCaseClassName}Activity.class);
        intent.putExtra(AppConstant.INTENT_EXTRA_TITLE, title);
        intent.putExtra(AppConstant.INTENT_EXTRA_ENTITY_ID, responseList.get(position).getId());
        startActivity(intent);
        GUIUtils.overridePendingTransitionForEnter(this);
    }
    
    @Override
    public void onSuccessResponse(Get${entity.upperCamelCaseClassName}ListResponse response) {
        if(response != null){
            if(response.get${entity.upperCamelCaseClassName}List() != null){
                if(response.get${entity.upperCamelCaseClassName}List().size() == 0){
                    showNoRecordFound();
                } else {
                	responseList = response.get${entity.upperCamelCaseClassName}List();
                    setAdapter(response.get${entity.upperCamelCaseClassName}List());
                }
            } else {
                showNoRecordFound();
            }
        } else {
            showNetworkFailure();
        }
    }
    
    private void setAdapter(ArrayList<Get${entity.upperCamelCaseClassName}ListResponse.Get${entity.upperCamelCaseClassName}Details> list){
        adapter = new List${entity.upperCamelCaseClassName}Adapter(this, list);
        recycleView.setAdapter(adapter);
        showRecycleView();
    }

    @Override
    public void OnFailureResponse() {
    	showNetworkFailure();
    }
    
    public void showNetworkFailure(){
        networkFailureImageView.setVisibility(View.VISIBLE);
        noRecordFoundImageView.setVisibility(View.GONE);
        recycleView.setVisibility(View.GONE);
    }
    
    public void showNoRecordFound(){
        networkFailureImageView.setVisibility(View.GONE);
        noRecordFoundImageView.setVisibility(View.VISIBLE);
        recycleView.setVisibility(View.GONE);
    }
    
    public void showRecycleView(){
        networkFailureImageView.setVisibility(View.GONE);
        noRecordFoundImageView.setVisibility(View.GONE);
        recycleView.setVisibility(View.VISIBLE);
    }
    
    public void hideEveryThing(){
        networkFailureImageView.setVisibility(View.GONE);
        noRecordFoundImageView.setVisibility(View.GONE);
        recycleView.setVisibility(View.GONE);
    }
}