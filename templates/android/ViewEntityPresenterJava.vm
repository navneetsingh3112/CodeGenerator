package in.novopay.services.presenters;

import com.google.gson.Gson;

import in.novopay.network.networking.Service;
import in.novopay.network.objects.TxnCompletionEvent;
import in.novopay.network.requests.Delete${entity.upperCamelCaseClassName}Request;
import in.novopay.network.requests.Get${entity.upperCamelCaseClassName}DetailsRequest;
import in.novopay.network.responses.Delete${entity.upperCamelCaseClassName}Response;
import in.novopay.network.responses.Get${entity.upperCamelCaseClassName}DetailsResponse;
import in.novopay.services.base.BasePresenter;
import in.novopay.services.views.View${entity.upperCamelCaseClassName}View;
import rx.Subscription;
import rx.subscriptions.CompositeSubscription;

/**
 * Created by ${entity.author} on ${entity.date}.
 */

public class View${entity.upperCamelCaseClassName}Presenter extends BasePresenter {
    private View${entity.upperCamelCaseClassName}View view;

    public View${entity.upperCamelCaseClassName}Presenter(Service service, View${entity.upperCamelCaseClassName}View view) {
        super.onCreate(service, view);
        this.service = service;
        this.view = view;
    }
    
    public void get${entity.upperCamelCaseClassName}Details(){
        view.showProgress(null);
        Subscription subscription = service.get${entity.upperCamelCaseClassName}Details(getNewSubscriber(), get${entity.upperCamelCaseClassName}DetailsRequest());
        subscriptions = new CompositeSubscription();
        subscriptions.add(subscription);
    }

    public Get${entity.upperCamelCaseClassName}DetailsRequest get${entity.upperCamelCaseClassName}DetailsRequest() {
        Get${entity.upperCamelCaseClassName}DetailsRequest get${entity.upperCamelCaseClassName}DetailsRequest = new Get${entity.upperCamelCaseClassName}DetailsRequest(view.getContext());
        get${entity.upperCamelCaseClassName}DetailsRequest.getRequest().setId(view.getId());
        return get${entity.upperCamelCaseClassName}DetailsRequest;
    }
    
    public void delete${entity.upperCamelCaseClassName}(){
        view.showProgress(null);
        Subscription subscription = service.delete${entity.upperCamelCaseClassName}(getNewSubscriber(), delete${entity.upperCamelCaseClassName}Request());
        subscriptions = new CompositeSubscription();
        subscriptions.add(subscription);
    }

    private Delete${entity.upperCamelCaseClassName}Request delete${entity.upperCamelCaseClassName}Request() {
        Delete${entity.upperCamelCaseClassName}Request delete${entity.upperCamelCaseClassName}Request = new Delete${entity.upperCamelCaseClassName}Request(view.getContext());
        delete${entity.upperCamelCaseClassName}Request.getRequest().setId(view.getId());
        return delete${entity.upperCamelCaseClassName}Request;
    }

    @Override
    public void onResultReceived(TxnCompletionEvent event) {
        view.hideProgress();
        if(event.getUrl().endsWith("get${entity.upperCamelCaseClassName}Details")){
            Get${entity.upperCamelCaseClassName}DetailsResponse response = new Gson().fromJson(event.getResponseString(), Get${entity.upperCamelCaseClassName}DetailsResponse.class);
            view.onSuccessResponseOfDetails(response);
        } else if(event.getUrl().endsWith("delete${entity.upperCamelCaseClassName}")){
            Delete${entity.upperCamelCaseClassName}Response response = new Gson().fromJson(event.getResponseString(), Delete${entity.upperCamelCaseClassName}Response.class);
            view.onSuccessResponseOfDelete(response);
        }
    }

    @Override
    public void onErrorReceived(TxnCompletionEvent event) {
        view.hideProgress();
        view.showMessage(event.getFailureMsg());
        if(event.getUrl() != null && event.getUrl().endsWith("get${entity.upperCamelCaseClassName}Details")){
        	view.OnFailureResponseOfDetails();
        }else if(event.getUrl() != null && event.getUrl().endsWith("delete${entity.upperCamelCaseClassName}")){
            view.OnFailureResponseOfDelete();
        }
    }
}