package in.novopay.services.activities;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.TextView;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import in.novopay.services.R;
import in.novopay.services.base.NovopayBaseActivity;
import in.novopay.services.presenters.Create${entity.upperCamelCaseClassName}Presenter;
import in.novopay.network.responses.Get${entity.upperCamelCaseClassName}DetailsResponse;
import in.novopay.services.utils.AppConstant;
import in.novopay.services.utils.GUIUtils;
import in.novopay.uicontrollibrary.components.EditText;
import in.novopay.services.views.Create${entity.upperCamelCaseClassName}View;
import in.novopay.network.responses.CreateOrUpdate${entity.upperCamelCaseClassName}Response;
import in.novopay.uicontrollibrary.utils.AppConstants;
import in.novopay.uicontrollibrary.utils.Utils;

/**
 * Created by ${entity.author} on ${entity.date}.
 */

public class Create${entity.upperCamelCaseClassName}Activity extends NovopayBaseActivity implements Create${entity.upperCamelCaseClassName}View {
    @BindView(R.id.toolbar)
    Toolbar toolbar;

    @BindView(R.id.activity_title)
    TextView activityTitle;

    @BindView(R.id.action_button)
    TextView actionButton;
    
    #foreach ($field in $entity.fieldList)
	#if( ${field.lowerCamelCaseName} != "createdOn" && ${field.lowerCamelCaseName} != "createdBy" && ${field.lowerCamelCaseName} != "updatedOn" && ${field.lowerCamelCaseName} != "updatedBy")
	
	@BindView(R.id.activity_create_${entity.lowerSnakeCaseClassName}_${field.name})
	EditText ${field.lowerCamelCaseName}EditText;
	
	#end
	#end
	
	private String title;
    private String activityType;
    private Create${entity.upperCamelCaseClassName}Presenter presenter;
    private Get${entity.upperCamelCaseClassName}DetailsResponse get${entity.upperCamelCaseClassName}DetailsResponse;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_${entity.lowerSnakeCaseClassName});
        getAppComponent().inject(this);
        ButterKnife.bind(this);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        presenter = new Create${entity.upperCamelCaseClassName}Presenter(service, this);

        getIntentExtras();
        setTitle(title);
        initView();
    }

    public void getIntentExtras() {
        title = getIntent().getStringExtra(AppConstant.INTENT_EXTRA_TITLE);
        activityType = getIntent().getStringExtra(AppConstant.INTENT_EXTRA_CREATE_OR_EDIT);
        get${entity.upperCamelCaseClassName}DetailsResponse = (Get${entity.upperCamelCaseClassName}DetailsResponse) getIntent().getSerializableExtra(AppConstant.INTENT_EXTRA_DETAILS_RESPONSE);
    }

    private void setTitle(String title) {
        if(AppConstant.INTENT_EXTRA_EDIT.equals(activityType)) {
            activityTitle.setText("Edit " + title);
            
            if(get${entity.upperCamelCaseClassName}DetailsResponse != null){
#foreach ($field in $entity.fieldList)
#if( ${field.lowerCamelCaseName} != "createdOn" && ${field.lowerCamelCaseName} != "createdBy" && ${field.lowerCamelCaseName} != "updatedOn" && ${field.lowerCamelCaseName} != "updatedBy")
				${field.lowerCamelCaseName}EditText.setText(get${entity.upperCamelCaseClassName}DetailsResponse.get${entity.upperCamelCaseClassName}Details().get${field.upperCamelCaseName}());
#end
#end
			} else {
                showMessage("Mandatory Data is missing");
            }
        } else {
            activityTitle.setText("New " + title);
        }
    }

    private void initView() {
    	if(AppConstant.INTENT_EXTRA_EDIT.equals(activityType)) {
    		actionButton.setText("SAVE");
    	} else {
    		actionButton.setText("CREATE");
    	}   
    }

    @OnClick(R.id.action_button)
    protected void actionButtonOnClick() {
        if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
            mLastClickTime = SystemClock.elapsedRealtime();
        } else {
            mLastClickTime = SystemClock.elapsedRealtime();
            if(	
#foreach ($field in $entity.fieldList)
#if( ${field.lowerCamelCaseName} != "createdOn" && ${field.lowerCamelCaseName} != "createdBy" && ${field.lowerCamelCaseName} != "updatedOn" && ${field.lowerCamelCaseName} != "updatedBy")
#if( $field.isMandatory )
#if( $velocityCount == 1 )
            	${field.lowerCamelCaseName}EditText.validate()
#else
            	&& ${field.lowerCamelCaseName}EditText.validate()
#end
#end
#end
#end
             	){
            	presenter.createOrUpdate${entity.upperCamelCaseClassName}(activityType);
            }
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onBackPressed() {
        finish();
        GUIUtils.overridePendingTransitionForExit(this);
    }
    
    @Override
    public String getId() {
        return get${entity.upperCamelCaseClassName}DetailsResponse.get${entity.upperCamelCaseClassName}Details().getId();
    }
    
#foreach ($field in $entity.fieldList)
#if( ${field.lowerCamelCaseName} != "createdOn" && ${field.lowerCamelCaseName} != "createdBy" && ${field.lowerCamelCaseName} != "updatedOn" && ${field.lowerCamelCaseName} != "updatedBy")
    @Override
    public String get${field.lowerCamelCaseName}() {
    	return ${field.lowerCamelCaseName}EditText.getValue();
    }
    
#end
#end

	@Override
	public void handleCreateOrUpdate${entity.upperCamelCaseClassName}Response(CreateOrUpdate${entity.upperCamelCaseClassName}Response response) {
		AlertDialog.Builder builder = new AlertDialog.Builder(this).setCancelable(false);
        View view = getLayoutInflater().inflate(R.layout.template_dialog, null, false);
        builder.setView(view);
        TextView title = (TextView) view.findViewById(R.id.heading_text);
        title.setText("Success");
        TextView textView = (TextView) view.findViewById(R.id.message_text);
        if(AppConstant.INTENT_EXTRA_EDIT.equals(activityType)) {
            textView.setText("Record successfully saved.");
        } else {
            textView.setText("Record successfully created.");
        }

        builder.setPositiveButton(AppConstants.OK, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                dialog.dismiss();
                setResult(RESULT_OK);
                onBackPressed();
            }
        });

        AlertDialog dialog = builder.create();
        dialog.show();
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getResources().getColor(R.color.novopay_color_primary));
	}  
}