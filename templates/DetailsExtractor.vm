package in.novopay.${usd.service}.${usd.flatCaseName}.daoservice;


import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;

import in.novopay.infra.platform.navigation.ExecutionContext;


/***
 * 
 * @author ${usd.author}
 *
 */
@Service
public class ${usd.upperCamelCaseName}DetailsExtractor implements ResultSetExtractor<Map<String, Object>> {
	
	private static final Logger LOG = LoggerFactory.getLogger(${usd.upperCamelCaseName}DetailsExtractor.class);
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	@Autowired
	public void setDataSource(DataSource dataSource) {
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}

	public Map<String, Object> get${usd.upperCamelCaseName}Details(ExecutionContext executionContext) { 
		Map<String, Object> paramMap = new HashMap<>();
		StringBuilder queryBuilder = new StringBuilder();
		queryBuilder.append("SELECT ");
		queryBuilder.append("${usd.columnListForDetails()}");
		queryBuilder.append(" FROM ");
		queryBuilder.append("${usd.getJoinStatement()}");
		queryBuilder.append(" WHERE 1=1 ");
		queryBuilder.append(" AND ${usd.getPrimaryEntityFromMap().getEntityAliasName()}.${usd.getPrimaryEntityPrimaryKeyField().getLowerSnakeCaseName()} = :${usd.getPrimaryEntityPrimaryKeyField().getLowerSnakeCaseName()}");
		LOG.debug("Query {}", queryBuilder);
		paramMap.put("${usd.getPrimaryEntityPrimaryKeyField().getLowerSnakeCaseName()}",Integer.parseInt(executionContext.getValue("id", String.class)));
		return namedParameterJdbcTemplate.query(queryBuilder.toString(), paramMap, this);
	}

	@Override
	public Map<String, Object> extractData(ResultSet rs) throws SQLException {
		Map<String, Object> recordDetailsMap = new HashMap<>();
		while(rs.next()) {
#foreach($key in $usd.getMapForResultSetDetails().keySet())
#set($objectName = ${usd.convertSnakeCaeToLowerCamelCase($key)})
			Object $objectName = getObjectValue(rs.getObject("${usd.getMapForResultSetDetails().get(${key})}"));
			if ($objectName != null) {
				recordDetailsMap.put("${key}", $objectName);
			}
 #end		
		}
		return recordDetailsMap;
	}
	
	private String getObjectValue(Object obj) {
		if (obj != null && obj.getClass().equals(Timestamp.class)) {
			Timestamp t = (Timestamp) obj;
			return Long.toString(t.getTime());
		} else if (obj != null && obj.getClass().equals(Date.class)) {
			Date t = (Date) obj;
			return Long.toString(t.getTime());
		} else if (obj != null) {
			return obj.toString();
		}
		return null;
	}
	
}
