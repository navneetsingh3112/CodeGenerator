package in.novopay.${usd.service}.${usd.flatCaseName}.daoservice;


import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.util.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Service;

import in.novopay.infra.platform.exception.NovopayFatalException;
import in.novopay.infra.platform.navigation.ExecutionContext;


/***
 * 
 * @author ${usd.author}
 *
 */
@Service
public class ${usd.upperCamelCaseName}ListExtractor extends AbstractResultSetExtractor {
	
	@Override
	public void populateQueryParameter(ExecutionContext executionContext) {	
#set($select_creteria = "SELECT ${usd.columnListForList()}")
#set($query = " FROM ${usd.getJoinStatement()}")
		executionContext.put("select_creteria", "${select_creteria}");
		executionContext.put("query", "${query}");
	}

	@Override
	public StringBuilder buildSearchCriteria(ExecutionContext executionContext, Map<String, Object> paramMap) {
		Map<String,String> keyAliasMap = new HashMap<>();
#foreach($key in $usd.getSearchableMap().keySet())
		keyAliasMap.put("${key}","${usd.getSearchableMap().get($key)}");
#end		
#if( $StringUtils.equalsIgnoreCase(${usd.deleteMode}, "LOGICAL"))
		StringBuilder sb = extractCriteriaKeyValue(paramMap, executionContext,keyAliasMap);
		sb.append(" AND ${usd.getPrimaryEntityFromMap().getEntityAliasName()}.is_deleted = false");		
		return sb;
#else
		return extractCriteriaKeyValue(paramMap, executionContext,keyAliasMap);
#end		
	}

	@Override
	public StringBuilder buildSortCriteria(JSONArray sortFields,String defaultSortOrder) throws NovopayFatalException {
		StringBuilder sortQueryBuilder = new StringBuilder();
		if (CollectionUtils.isEmpty(sortFields)) {
			if (StringUtils.isBlank(defaultSortOrder)) {
				defaultSortOrder = "${usd.getPrimaryEntityFromMap().getEntityAliasName()}.id,";
			}
			sortQueryBuilder.append(defaultSortOrder);
			return sortQueryBuilder;
		}
		JSONObject sortField;
		String fieldName;
		for (Object sortFieldObj : sortFields) {
			sortField = (JSONObject) sortFieldObj;
			fieldName = (String) sortField.get("field_name");
			if(fieldName.contains(".")) {
				fieldName = fieldName.split("\\.")[1];
			}
#foreach($key in $usd.getSortableMap().keySet())
#if($velocityCount == 1)
			if ("${key}".equals(fieldName)) {
				sortQueryBuilder.append("${usd.getSortableMap().get(${key})} ,");
#else	
			} else if ("${key}".equals(fieldName)) {
					sortQueryBuilder.append("${usd.getSortableMap().get(${key})} ,");
#end
#end
			} else {
				throw new NovopayFatalException("", "Invalid field_name");
			}
		}	
		return sortQueryBuilder;
	}

	@Override
	public List<Map<String, Object>> extractData(ResultSet rs) throws SQLException {
		List<Map<String, Object>> recordDetailsMapList = new ArrayList<>();
		Map<String, Object> recordDetailsMap;
		Map<String, Object> fieldDetailsMap;
		while(rs.next()) {
			recordDetailsMap =  new HashMap<>();
#foreach($entitySet in $usd.getMapForResultSetList().keySet())
			fieldDetailsMap = new HashMap<>();
#foreach($key in $usd.getMapForResultSetList().get($entitySet).keySet())
#set($objectName = ${usd.convertSnakeCaeToLowerCamelCase(${usd.getMapForResultSetList().get($entitySet).get(${key})})})
			Object $objectName = getObjectValue(rs.getObject("${usd.getMapForResultSetList().get($entitySet).get(${key})}"));
			if ($objectName != null) {
				fieldDetailsMap.put("${key}", $objectName);
			}
 #end
 			recordDetailsMap.put("${entitySet.lowerSnakeCaseEntityName}_details",fieldDetailsMap);
 #end
			recordDetailsMapList.add(recordDetailsMap);
		}
		return recordDetailsMapList;
	}
	
	private String getObjectValue(Object obj) {
		if (obj != null && obj.getClass().equals(Timestamp.class)) {
			Timestamp t = (Timestamp) obj;
			return Long.toString(t.getTime());
		} else if (obj != null && obj.getClass().equals(Date.class)) {
			Date t = (Date) obj;
			return Long.toString(t.getTime());
		} else if (obj != null) {
			return obj.toString();
		}
		return null;
	}
	
}
