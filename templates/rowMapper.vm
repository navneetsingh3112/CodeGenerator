package in.novopay.${entity.service}.${entity.userStory}.daoservice;


import in.novopay.infra.platform.exception.NovopayFatalException;
import in.novopay.infra.platform.navigation.ExecutionContext;
import org.apache.commons.lang3.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;


/***
 * 
 * @author ${entity.author}
 *
 */
@Service
public class ${entity.upperCamelCaseClassName}RowMapper extends AbstractRowMapper {
	
	@Override
	public void populateQueryParameter(ExecutionContext executionContext){	
		executionContext.put("query", "FROM ${entity.table} WHERE 1=1 ");
#set($dataFieldList = "id")
#foreach ($field in $entity.dataFieldList)
#if( $field.isListElement)
#set($dataFieldList = "#if($StringUtils.isEmpty(${dataFieldList}))${field.lowerSnakeCaseName} #{else}${dataFieldList} , ${field.lowerSnakeCaseName}#end")
#end
#end
		executionContext.put("select_creteria", "SELECT ${dataFieldList} ");		
	}

	@Override
	public StringBuilder buildSearchCriteria(ExecutionContext executionContext, Map<String, Object> paramMap) {
		List<String> searchableKeyList = new ArrayList<>();
#foreach ($field in $entity.dataFieldList)	
#if($field.isSearchable)
		searchableKeyList.add("${field.lowerSnakeCaseName}");
#end
#end
#if( $StringUtils.equalsIgnoreCase(${entity.deleteMode}, "LOGICAL"))
		StringBuilder sb = extractCriteriaKeyValue(paramMap, executionContext,searchableKeyList);
		sb.append(" AND is_deleted = false");		
		return sb;
#else
		return extractCriteriaKeyValue(paramMap, executionContext,searchableKeyList);
#end
	}

	@Override
	public StringBuilder buildSortCriteria(JSONArray sortFields) throws NovopayFatalException {
		StringBuilder sortQueryBuilder = new StringBuilder();
		JSONObject sortField;
		String fieldName;
		
		for (Object sortFieldObj : sortFields) {
			sortField = (JSONObject) sortFieldObj;
			fieldName = (String) sortField.get("field_name");
			if(fieldName.contains(".")) {
				fieldName = fieldName.split("\\.")[1];
			}
#set($counter = 1)
#foreach ($field in $entity.dataFieldList)
#if($field.isSearchable)
#if($counter == 1)
			if ("${field.lowerSnakeCaseName}".equals(fieldName)) {
				sortQueryBuilder.append("${field.lowerSnakeCaseName} ,");
#else
			} else if ("${field.lowerSnakeCaseName}".equals(fieldName)) {
				sortQueryBuilder.append("${field.lowerSnakeCaseName} ,");
#end
#set($counter = $counter + 1)
#end
#end
			} else {
				throw new NovopayFatalException("", "Invalid field_name");
			}
		}
		return sortQueryBuilder;
	}

	@Override
	public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
		Map<String, Object> recordDetailsMap = new HashMap<>();
		Map<String, Object> dataMap = new HashMap<>();
		dataMap.put("id", ""+rs.getInt("id"));
#foreach ($field in $entity.dataFieldList)
#if( $field.isListElement)
#if( ${field.javaType} == "String")
		dataMap.put("${field.lowerSnakeCaseName}", ""+rs.getString("${field.lowerSnakeCaseName}"));
#elseif( ${field.javaType} == "Integer")
		dataMap.put("${field.lowerSnakeCaseName}", ""+rs.getInt("${field.lowerSnakeCaseName}"));
#elseif( ${field.javaType} == "Date")	
		dataMap.put("${field.lowerSnakeCaseName}", rs.getDate("${field.lowerSnakeCaseName}") != null ? ""+rs.getDate("${field.lowerSnakeCaseName}").getTime() :""+rs.getDate("${field.lowerSnakeCaseName}"));
#elseif( ${field.javaType} == "Long")
		dataMap.put("${field.lowerSnakeCaseName}", ""+rs.getLong("${field.lowerSnakeCaseName}"));
#elseif( ${field.javaType} == "Double" || ${field.javaType} == "Float")
		dataMap.put("${field.lowerSnakeCaseName}", ""+rs.getBigDecimal("${field.lowerSnakeCaseName}"));
#end
#end
#end		
		recordDetailsMap.put("${entity.lowerSnakeCaseClassName}_details", dataMap);
		return recordDetailsMap;
	}
	
}
