import {Component, ViewEncapsulation} from '@angular/core';
import {Location} from "@angular/common";
import {ActivatedRoute, Router} from '@angular/router';

import {CommonHttpService} from "../../services/common-http.service";
import {CommonUtilityService} from "../../services/common-utility.service";
import {App} from "../../app.component";
import {AppConstants} from "../../app.constants";
import {BaseService} from "../../base-module/base.service";
import {ResourceFactoryConstants} from "../../services/resource-factory.constants";
import {BaseCopyComponent} from "../../base-module/copy/base-copy.component";
import {BaseListTypes} from '../../base-module/list/base-list-types';

declare var jQuery:any;
/**
* ${entity.lowerTrainCaseClassName} Copy component
* @author ${entity.author}
*/
@Component({
selector: '[${entity.lowerTrainCaseClassName}-copy]',
templateUrl: './${entity.lowerTrainCaseClassName}-copy.component.html',
encapsulation: ViewEncapsulation.None,
})
export class ${entity.upperCamelCaseClassName}CopyComponent extends BaseCopyComponent {
#foreach ($field in $entity.fieldList)
    #if($field.IsAutoPopulate)
    private ${field.apiKey}: string = '';
    #end
#end
constructor(protected location:Location,
protected mainApp: App,
protected appConstants: AppConstants,
protected commonHttpService:CommonHttpService,
protected commonUtilityService:CommonUtilityService,
protected baseService: BaseService,
protected router:Router,
protected route:ActivatedRoute,
protected resourceFactoryConstants:ResourceFactoryConstants) {
super(location, mainApp, appConstants, commonHttpService, commonUtilityService,
baseService, router, route,resourceFactoryConstants);

let createComponentProperty : ICreateComponentProperty = {
moduleName: "${entity.lowerTrainCaseClassName}",
formHtmlId: '${entity.lowerTrainCaseClassName}-copy-form',
draftListUrl:'/app/${entity.lowerTrainCaseClassName}/list/'+BaseListTypes.DRAFT_LIST,
createComponentAPI: this.resourceFactoryConstants.constants.${entity.lowerCamelCaseClassName}.create,
listComponentUrl: '/app/${entity.lowerTrainCaseClassName}/list/'+BaseListTypes.APPROVED_LIST,
useCase : "${entity.useCase}",
entity: {
#foreach ($field in $entity.fieldList)
    #if (($field.webType.equals('Textbox') || $field.webType.equals('Textarea')  || $field.webType.equals(
        'Date')) && !$field.IsAutoPopulate)
        ${field.lowerCamelCaseName}: {
        #if (${field.minDate})
        minDate: '${field.minDate}',
        #end
        #if (${field.maxDate})
        maxDate: '${field.maxDate}',
        #end
    value: '',
    type: '${field.webType}',
    apiKey: '${field.apiKey}',
    parentApiKey: '${field.parentApiKey}'
    },
    #end
#end
},
radioEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Radio'))
        ${field.lowerCamelCaseName}: {
    value: '',
    groupName: '${field.lowerTrainCaseName}-grp',
    apiKey: '${field.apiKey}',
    parentApiKey: '${field.parentApiKey}',
        #if (${field.populateFromMasterData})
        populateFromMasterData: ${field.populateFromMasterData},
        #end
        #if (${field.masterDataType})
        masterDataType: '${field.masterDataType}',
        #end
        #if (${field.masterDataSubType})
        masterDataSubType: '${field.masterDataSubType}',
        #end
        #if (${field.isCodeIncludedInDisplay})
        isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
        #end
        #if (${field.inputApi})
        inputApi: "${field.inputApi}",
        #end
        #if (${field.inputApiListKey})
        inputApiListKey: "${field.inputApiListKey}",
        #end
        #if (${field.inputApiDetailsKey})
        inputApiDetailsKey: "${field.inputApiDetailsKey}",
        #end
        #if (${field.inputApiIdKey})
        inputApiIdKey: "${field.inputApiIdKey}",
        #end
        #if (${field.inputApiCodeKey})
        inputApiCodeKey: "${field.inputApiCodeKey}",
        #end
        #if (${field.inputApiValueKey})
        inputApiValueKey: "${field.inputApiValueKey}",
        #end
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            id: "${element.id}",
            code: "${element.code}",
            text: "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end
},
dropdownEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Dropdown'))
        ${field.lowerCamelCaseName}: {
    isValid: true,
    selectedValue: '',
    initialValues: [],
    ready: false,
    options: {
    placeholder: '${field.placeholder}'
    },
    required: ${field.isMandatory},
        #if (${field.populateFromMasterData})
        populateFromMasterData: ${field.populateFromMasterData},
        #end
        #if (${field.masterDataType})
        masterDataType: '${field.masterDataType}',
        #end
        #if (${field.masterDataSubType})
        masterDataSubType: '${field.masterDataSubType}',
        #end
        #if (${field.isCodeIncludedInDisplay})
        isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
        #end
        #if (${field.inputApi})
        inputApi: "${field.inputApi}",
        #end
        #if (${field.inputApiListKey})
        inputApiListKey: "${field.inputApiListKey}",
        #end
        #if (${field.inputApiDetailsKey})
        inputApiDetailsKey: "${field.inputApiDetailsKey}",
        #end
        #if (${field.inputApiIdKey})
        inputApiIdKey: "${field.inputApiIdKey}",
        #end
        #if (${field.inputApiCodeKey})
        inputApiCodeKey: "${field.inputApiCodeKey}",
        #end
        #if (${field.inputApiValueKey})
        inputApiValueKey: "${field.inputApiValueKey}",
        #end
    apiKey: '${field.apiKey}',
    parentApiKey: '${field.parentApiKey}',
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            id: "${element.id}",
            code: "${element.code}",
            text: "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end
},
checkboxEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Checkbox'))
        ${field.lowerCamelCaseName}: {
    apiKey: '${field.apiKey}',
    parentApiKey: '${field.parentApiKey}',
    checkUncheckAllCheckboxesModel: false,
    isValidAllowedCheckboxes: true,
    required: ${field.isMandatory},
        #if (${field.populateFromMasterData})
        populateFromMasterData: ${field.populateFromMasterData},
        #end
        #if (${field.masterDataType})
        masterDataType: '${field.masterDataType}',
        #end
        #if (${field.masterDataSubType})
        masterDataSubType: '${field.masterDataSubType}',
        #end
        #if (${field.isCodeIncludedInDisplay})
        isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
        #end
        #if (${field.inputApi})
        inputApi: "${field.inputApi}",
        #end
        #if (${field.inputApiListKey})
        inputApiListKey: "${field.inputApiListKey}",
        #end
        #if (${field.inputApiDetailsKey})
        inputApiDetailsKey: "${field.inputApiDetailsKey}",
        #end
        #if (${field.inputApiIdKey})
        inputApiIdKey: "${field.inputApiIdKey}",
        #end
        #if (${field.inputApiCodeKey})
        inputApiCodeKey: "${field.inputApiCodeKey}",
        #end
        #if (${field.inputApiValueKey})
        inputApiValueKey: "${field.inputApiValueKey}",
        #end
        #if (${field.chunkSize})
        chunkSize: ${field.chunkSize}
        #end
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            id: "${element.id}",
            code: "${element.code}",
            text: "${element.text}",
            isChecked: false,
            },
            #end
        ]
        #end
    },
    #end
#end
},
multiselectEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Multiselect'))
        ${field.lowerCamelCaseName}: {
    isValid: true,
    ready: false,
    selectedList: [],
    initialValues: [],
    dropdownSettings :{
    singleSelection: false,
    text:"Select Countries",
    selectAllText:'Select All',
    unSelectAllText:'UnSelect All',
    enableSearchFilter: true,
    classes:"custom-form-control",
    badgeShowLimit: 2
    },
    required: ${field.isMandatory},
        #if (${field.populateFromMasterData})
        populateFromMasterData: ${field.populateFromMasterData},
        #end
        #if (${field.masterDataType})
        masterDataType: '${field.masterDataType}',
        #end
        #if (${field.masterDataSubType})
        masterDataSubType: '${field.masterDataSubType}',
        #end
        #if (${field.isCodeIncludedInDisplay})
        isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
        #end
        #if (${field.inputApi})
        inputApi: "${field.inputApi}",
        #end
        #if (${field.inputApiListKey})
        inputApiListKey: "${field.inputApiListKey}",
        #end
        #if (${field.inputApiDetailsKey})
        inputApiDetailsKey: "${field.inputApiDetailsKey}",
        #end
        #if (${field.inputApiIdKey})
        inputApiIdKey: "${field.inputApiIdKey}",
        #end
        #if (${field.inputApiCodeKey})
        inputApiCodeKey: "${field.inputApiCodeKey}",
        #end
        #if (${field.inputApiValueKey})
        inputApiValueKey: "${field.inputApiValueKey}",
        #end
    apiKey: '${field.apiKey}',
    parentApiKey: '${field.parentApiKey}',
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            id: "${element.id}",
            code: "${element.code}",
            itemName: "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end
},
requestBody: {
#foreach ($parent in $entity.parentApiList)
'${parent.name}' : {},
#end
}};

let editComponentProperty : IEditComponentProperty = {
componentIdRequestBodyKey : "${entity.fetchApiKey}",
componentDetailsAPI : this.resourceFactoryConstants.constants.${entity.lowerCamelCaseClassName}.getDetails,
createComponentProperty : createComponentProperty
};

super.setEditComponentProperties(editComponentProperty);
}
}