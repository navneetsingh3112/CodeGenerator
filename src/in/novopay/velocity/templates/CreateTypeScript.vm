import {Component, ViewEncapsulation} from '@angular/core';
import {Location} from "@angular/common";
import {ActivatedRoute, Router} from '@angular/router';

import {CommonHttpService} from "../../services/common-http.service";
import {CommonUtilityService} from "../../services/common-utility.service";
import {App} from "../../app.component";
import {AppConstants} from "../../app.constants";
import {BaseComponent} from "../../base-module/create/base-create.component";
import {BaseService} from "../../base-module/base.service";
import {ResourceFactoryConstants} from "../../services/resource-factory.constants";

declare var jQuery:any;
/**
* ${entity.lowerTrainCaseClassName} Create component
* @author ${entity.author}
*/
@Component({
selector: '[${entity.lowerTrainCaseClassName}-create]',
templateUrl: './${entity.lowerTrainCaseClassName}-create.component.html',
encapsulation: ViewEncapsulation.None,
})
export class ${entity.upperCamelCaseClassName}CreateComponent extends BaseComponent {
constructor(private location:Location,
protected mainApp: App,
protected appConstants: AppConstants,
protected commonHttpService:CommonHttpService,
protected commonUtilityService:CommonUtilityService,
protected baseService: BaseService,
protected router:Router,
protected route:ActivatedRoute,
protected resourceFactoryConstants:ResourceFactoryConstants) {
super(location, mainApp, appConstants, commonHttpService, commonUtilityService,
baseService, router, route, resourceFactoryConstants);

let componentProperty : ICreateComponentProperty = {
componentPermissionKey: 'PERMISSION_KEY',
formHtmlId: '${entity.lowerTrainCaseClassName}-create-form',
createComponentAPI: this.resourceFactoryConstants.constants.${entity.lowerCamelCaseClassName}.create,
listComponentUrl: '/app/${entity.lowerTrainCaseClassName}/list',
entity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Textbox') || $field.webType.equals('Textarea')  
    || $field.webType.equals('Date') || $field.webType.equals('Datetime'))
        ${field.lowerCamelCaseName}: {
    value: '',
    type: '${field.webType}',
    apiKey: '${field.apiKey}'
    },
    #end
#end
},
radioEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Radio'))
        ${field.lowerCamelCaseName}: {
    value: '',
    groupName: '${field.lowerTrainCaseName}-grp',
    apiKey: '${field.apiKey}',
        #if ($field.dataList.equals([]) )
        input: {
        inputApi: "${field.inputApi}" },
        populateFromMasterData:  "${field.populateFromMasterData}",
        #end
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            "id": "${element.id}",
            "code": "${element.code}",
            "text": "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end

dropdownEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Dropdown'))
        ${field.lowerCamelCaseName}: {
    displayName: '${field.displayName}',
    isValid: true,
    selectedValue: '',
    initialValues: [],
    options: {
                        placeholder: '${field.placeholder}'
                    },
    required: ${field.isMandatory},
    populateFromMasterData: ${field.populateFromMasterData},
    masterDataType: '${field.masterDataType}',
    masterDataSubType: '${field.masterDataSubType}',
    isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
    apiKey: '${field.apiKey}',
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            "id": "${element.id}",
            "code": "${element.code}",
            "text": "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end

}};
super.setComponentProperties(componentProperty);

#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals(
        'Radio') && $field.dataList.equals([])) super.getRadioElementList(this.radioEntity.${field.lowerCamelCaseName},'${field.masterDataType}','${field.masterDataSubType}');
    #end
#end

}
ngOnInit(): void {
super.ngOnInit();
}
}