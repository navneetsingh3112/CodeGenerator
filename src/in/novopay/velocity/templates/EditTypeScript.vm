import {Component, ViewEncapsulation} from '@angular/core';
import {Location} from "@angular/common";
import {ActivatedRoute, Router} from '@angular/router';

import {CommonHttpService} from "../../services/common-http.service";
import {CommonUtilityService} from "../../services/common-utility.service";
import {App} from "../../app.component";
import {AppConstants} from "../../app.constants";
import {BaseComponent} from "../../base-module/create/base-create.component";
import {BaseService} from "../../base-module/base.service";
import {ResourceFactoryConstants} from "../../services/resource-factory.constants";

declare var jQuery:any;

@Component({
    selector: '[${entity.lowerTrainCaseClassName}-edit]',
    templateUrl: './${entity.lowerTrainCaseClassName}-edit.component.html',
    encapsulation: ViewEncapsulation.None,
})
export class ${entity.upperCamelCaseClassName}EditComponent extends BaseComponent {
    protected componentIdRequestBodyKey: string;
    protected componentDetailsAPI: string;
    protected componentDetailsResponseBodyKey: string;
    
    protected saveFormData():void {
        jQuery('body').scrollTop(0);
        this.populateRequestBody();
        this.requestBody['${entity.fetchApiKey}'] = this.route.snapshot.params['id'];
        this.busy = this.baseService.updateComponent(this.requestBody,this.createComponentAPI)
            .then(resp=> this.handleCreateComponentResponse(resp));
    }

    constructor(private location:Location,
                private mainApp: App,
                private appConstants: AppConstants,
                private commonHttpService:CommonHttpService,
                private commonUtilityService:CommonUtilityService,
                private baseService: BaseService,
                private router:Router,
                private route:ActivatedRoute,
                protected resourceFactoryConstants:ResourceFactoryConstants) {
        super(location, mainApp, appConstants, commonHttpService, commonUtilityService,
            baseService, router, route, resourceFactoryConstants);

        this.componentIdRequestBodyKey = "${entity.fetchApiKey}";
        this.componentDetailsAPI = this.resourceFactoryConstants.constants.${entity.lowerCamelCaseClassName}.getDetails;
        this.componentDetailsResponseBodyKey = "${entity.table}_details";

        let componentProperty : ICreateComponentProperty = {
componentPermissionKey: 'PERMISSION_KEY',
formHtmlId: '${entity.lowerTrainCaseClassName}-create-form',
createComponentAPI: this.resourceFactoryConstants.constants.${entity.lowerCamelCaseClassName}.create,
listComponentUrl: '/app/${entity.lowerTrainCaseClassName}/list',
entity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Textbox') || $field.webType.equals('Textarea')  
    || $field.webType.equals('Date') || $field.webType.equals('Datetime'))
        ${field.lowerCamelCaseName}: {
    value: '',
    type: '${field.webType}',
    apiKey: '${field.apiKey}'
    },
    #end
#end
},
radioEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Radio'))
        ${field.lowerCamelCaseName}: {
    displayName: '${field.displayName}',
    value: '',
    groupName: '${field.lowerTrainCaseName}-grp',
    apiKey: '${field.apiKey}',
    populateFromMasterData: ${field.populateFromMasterData},
    masterDataType: '${field.masterDataType}',
    masterDataSubType: '${field.masterDataSubType}',
    isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
        #if ($field.dataList.equals([]) )
        input: {
        inputApi: "${field.inputApi}" },
        #end
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            "id": "${element.id}",
            "code": "${element.code}",
            "text": "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end
},
dropdownEntity: {
#foreach ($field in $entity.fieldList)
    #if ($field.webType.equals('Dropdown'))
        ${field.lowerCamelCaseName}: {
    displayName: '${field.displayName}',
    isValid: true,
    selectedValue: '',
    initialValues: [],
    options: {
                        placeholder: '${field.placeholder}'
                    },
    required: ${field.isMandatory},
    populateFromMasterData: ${field.populateFromMasterData},
    masterDataType: '${field.masterDataType}',
    masterDataSubType: '${field.masterDataSubType}',
    isCodeIncludedInDisplay: ${field.isCodeIncludedInDisplay},
    apiKey: '${field.apiKey}',
    dataList : [
        #if ($!{field.dataList} )
            #foreach ($element in $field.dataList)
            {
            "id": "${element.id}",
            "code": "${element.code}",
            "text": "${element.text}"
            },
            #end
        ]
        #end
    },
    #end
#end

}};
        super.setComponentProperties(componentProperty);
}
ngOnInit(): void {
super.ngOnInit();
}
}